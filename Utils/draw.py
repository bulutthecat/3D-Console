import os

# Dictionary to map grayscale values to ANSI escape codes for terminal color
GRAYSCALE_PALETTE = {
    0: "\033[0;30m\u2588",  # Black
    1: "\033[1;30m\u2588",  # Dark Gray
    2: "\033[0;37m\u2588",  # Light Gray
    3: "\033[1;37m\u2588",  # White
}

# Draw pixel at (x, y) with intensity value (0-3)
def draw_pixel(x, y, intensity):
    # Move cursor to position (x, y)
    print(f"\033[{y + 1};{x + 1}H", end="")

    # Draw pixel using ANSI escape code for color
    print(GRAYSCALE_PALETTE.get(intensity, "\033[1;37m\u2588"), end="")

    # Reset color to default
    print("\033[0m", end="")

# Draw pixels in a list [[0, 0, 1], [1, 0, 1]]
def draw_pixels(list):
    for list in list:
        draw_pixel(list[0], list[1], 1)

def array_draw(array, line_coords, x_offset=0, y_offset=0, intensity=1):
    pixels = []
    
    # Draw existing pixels from the array
    for y in range(len(array)):
        for x in range(len(array[y])):
            if array[y][x] > 0:
                pixels.append([x + x_offset, y + y_offset, array[y][x]])

    # Draw line using coordinates generated by line_coordinates function
    for coord in line_coords:
        x, y = coord
        x += x_offset
        y += y_offset

        if 0 <= y < len(array) and 0 <= x < len(array[0]):
            array[y][x] = intensity
            pixels.append([x, y, intensity])

    draw_pixels(pixels)

# Function to generate line coordinates (as previously provided)
def line_coordinates(x1, y1, x2, y2, resolution=1):
    # Initialize the list to store the coordinates
    coordinates = []
    
    if x1 == x2:
        for y in range(min(y1, y2), max(y1, y2) + 1, resolution):
            coordinates.append([x1, y])
        return coordinates
    if y1 == y2:
        for x in range(min(x1, x2), max(x1, x2) + 1, resolution):
            coordinates.append([x, y1])
        return coordinates
    
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    sx = 1 if x1 < x2 else -1
    sy = 1 if y1 < y2 else -1
    err = dx - dy
    
    x, y = x1, y1
    
    while True:
        if x % resolution == 0 and y % resolution == 0:
            coordinates.append([x, y])
        
        if x == x2 and y == y2:
            break
        
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x += sx
        if e2 < dx:
            err += dx
            y += sy
            
    return coordinates

def clear_screen(array):
    # Set all values in the array to 0
    for y in range(len(array)):
        for x in range(len(array[y])):
            array[y][x] = 0

"""
    # Draw black pixels to the terminal for every position
    for y in range(len(array)):
        for x in range(len(array[y])):
            draw_pixel(x, y, 0)
"""